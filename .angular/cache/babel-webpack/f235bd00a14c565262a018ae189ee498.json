{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./form-container.component\";\nexport let InputBaseComponent = /*#__PURE__*/(() => {\n  class InputBaseComponent {\n    constructor(parent) {\n      this.parent = parent;\n    }\n\n    get errorLabel() {\n      const key = Object.keys(this.control.errors)[0].toUpperCase();\n      return `ERRORS.${key}`;\n    }\n\n    get control() {\n      let result;\n      this.controlPath.split('.').forEach(path => {\n        result = result ? result.get(path) : this.parent.form.get(path);\n      });\n      return result;\n    }\n\n    get label() {\n      return `LABELS.${this.path}`;\n    }\n\n    get hint() {\n      return `HINTS.${this.path}`;\n    }\n\n    get path() {\n      const path = this.controlPath.split('.');\n      return path[path.length - 1].toUpperCase();\n    }\n\n    hasError(error) {\n      if (error) {\n        return this.control.hasError(error);\n      } else {\n        return !!this.control.errors;\n      }\n    }\n\n    hasValidator(validator) {\n      const v = this.control.validator;\n      const vv = v ? v(this.control) : null;\n      return vv ? vv.hasOwnProperty(validator) : false;\n    }\n\n  }\n\n  InputBaseComponent.ɵfac = function InputBaseComponent_Factory(t) {\n    return new (t || InputBaseComponent)(i0.ɵɵinject(i1.FormContainerComponent, 1));\n  };\n\n  InputBaseComponent.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: InputBaseComponent,\n    factory: InputBaseComponent.ɵfac\n  });\n  return InputBaseComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}