{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { FormArray, FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/material/dialog\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"./form-table-field/form-table-field.component\";\nimport * as i6 from \"@angular/material/icon\";\n\nfunction FormTableComponent_ng_container_2_td_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelementStart(1, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function FormTableComponent_ng_container_2_td_4_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return ctx_r5.doneRow(i_r2);\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 8);\n    i0.ɵɵtext(3, \"save\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function FormTableComponent_ng_container_2_td_4_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r7);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.deleteRow(i_r2);\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\", 10);\n    i0.ɵɵtext(6, \"delete_forever\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"disabled\", ctx_r3.formTable.invalid || ctx_r3.formTable.untouched);\n  }\n}\n\nfunction FormTableComponent_ng_container_2_td_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵelementStart(1, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function FormTableComponent_ng_container_2_td_5_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r12);\n      const i_r2 = i0.ɵɵnextContext().index;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.editRow(i_r2);\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\", 11);\n    i0.ɵɵtext(3, \"edit\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction FormTableComponent_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"tr\");\n    i0.ɵɵelementStart(2, \"td\");\n    i0.ɵɵelement(3, \"pol-form-table-field\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, FormTableComponent_ng_container_2_td_4_Template, 7, 1, \"td\", 6);\n    i0.ɵɵtemplate(5, FormTableComponent_ng_container_2_td_5_Template, 4, 0, \"td\", 6);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const control_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"formField\", control_r1)(\"tableConfig\", ctx_r0._tableData.inputType)(\"index\", i_r2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", control_r1.get(\"isEditable\").value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !!!control_r1.get(\"isEditable\").value);\n  }\n}\n\nexport let FormTableComponent = /*#__PURE__*/(() => {\n  class FormTableComponent {\n    constructor(fb) {\n      this.fb = fb;\n      this.dataUpdate = new EventEmitter();\n      this.rowUpdate = new EventEmitter();\n      this.formTable = new FormGroup({\n        rows: new FormArray([])\n      });\n    }\n\n    set tableData(newTableData) {\n      if (this._tableData !== newTableData) {\n        this._tableData = newTableData;\n        const formArray = this.formTable.get('rows');\n        formArray.clear();\n        this.initialize();\n      }\n    }\n\n    initialize() {\n      console.log('initialize ran');\n\n      this._tableData.sourceObservable.subscribe(valueArray => {\n        this.formTable = new FormGroup({\n          rows: new FormArray([])\n        });\n        valueArray.forEach((value, index) => {\n          const formArray = this.formTable.get('rows');\n          formArray.push(this.generateBaseFormGroup(value));\n          formArray.get(index.toString()).patchValue(value);\n        });\n        console.log('this.form => ', this.formTable);\n        console.log('this._tableData => ', this._tableData);\n      });\n    }\n\n    generateBaseFormGroup(values) {\n      const formGroup = new FormGroup({});\n\n      for (const field of this._tableData.inputType) {\n        formGroup.addControl(field.name, new FormControl());\n        formGroup.addControl('isEditable', new FormControl(false));\n        formGroup.disable();\n      }\n\n      for (const field in values) {\n        if (values[field] && !this.formTable.get(field)) {\n          formGroup.addControl(field, new FormControl());\n          formGroup.addControl('isEditable', new FormControl(false));\n          formGroup.disable();\n        }\n      }\n\n      return formGroup;\n    }\n\n    addRow() {\n      const formGroup = new FormGroup({});\n      const formArray = this.formTable.get('rows');\n\n      this._tableData.inputType.forEach(input => {\n        formGroup.addControl(input.name, new FormControl());\n        formGroup.addControl('isEditable', new FormControl(true));\n        formGroup.controls[`${input.name}`].enable();\n\n        if (input.disabled === 'onCreate' || input.disabled === 'onWrite') {\n          console.log('set to disable');\n          formGroup.controls[`${input.name}`].disable();\n        } else {\n          console.log('set validators');\n\n          if (input.validators) {\n            for (const validator of input.validators) {\n              if (validator.trigger === 'onCreate' || validator.trigger === 'onWrite') {\n                if (validator.type === 'sync') {\n                  switch (validator.name) {\n                    case 'required':\n                      formGroup.controls[`${input.name}`].setValidators([Validators.required]);\n                      break;\n\n                    case 'min':\n                      formGroup.controls[`${input.name}`].setValidators([Validators.min(validator.value)]);\n                      break;\n\n                    case 'max':\n                      formGroup.controls[`${input.name}`].setValidators([Validators.min(validator.value)]);\n                      break;\n\n                    default:\n                      break;\n                  }\n                }\n              }\n            }\n          }\n\n          ;\n        }\n      });\n\n      formArray.push(formGroup);\n      console.log(this.formTable.controls);\n    }\n\n    deleteRow(index) {\n      const formArray = this.formTable.get('rows');\n      this.rowOutputData = formArray.getRawValue();\n\n      for (const row of this.rowOutputData) {\n        delete row.isEditable;\n      }\n\n      this.rowUpdate.emit({\n        data: this.rowOutputData[index],\n        action: 'delete'\n      });\n      formArray.removeAt(index);\n      this.outputData = formArray.getRawValue();\n\n      for (const row of this.outputData) {\n        delete row.isEditable;\n      }\n\n      this.dataUpdate.emit(this.outputData);\n    }\n\n    editRow(index) {\n      const formArray = this.formTable.get('rows');\n      formArray.at(index).get('isEditable').setValue(true);\n      formArray.at(index).enable();\n\n      this._tableData.inputType.forEach(input => {\n        if (input.disabled === 'onWrite' || input.disabled === 'onUpdate') {\n          console.log('set to disable');\n          formArray.at(index).get(input.name).disable();\n        } else {\n          console.log('set validators');\n\n          if (input.validators) {\n            for (const validator of input.validators) {\n              if (validator.trigger === 'onWrite' || validator.trigger === 'onUpdate') {\n                if (validator.type === 'sync') {\n                  switch (validator.name) {\n                    case 'required':\n                      formArray.at(index).get(input.name).setValidators([Validators.required]);\n                      break;\n\n                    case 'min':\n                      formArray.at(index).get(input.name).setValidators([Validators.min(validator.value)]);\n                      break;\n\n                    case 'max':\n                      formArray.at(index).get(input.name).setValidators([Validators.min(validator.value)]);\n                      break;\n\n                    default:\n                      break;\n                  }\n                }\n              }\n            }\n          }\n\n          ;\n        }\n      });\n    }\n\n    doneRow(index) {\n      const formArray = this.formTable.get('rows');\n      this.outputData = formArray.getRawValue();\n\n      for (const row of this.outputData) {\n        delete row.isEditable;\n      }\n\n      this.dataUpdate.emit(this.outputData);\n      this.rowUpdate.emit({\n        data: this.outputData[index],\n        action: 'update'\n      });\n      formArray.at(index).get('isEditable').setValue(false);\n      formArray.at(index).disable();\n    }\n\n  }\n\n  FormTableComponent.ɵfac = function FormTableComponent_Factory(t) {\n    return new (t || FormTableComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder));\n  };\n\n  FormTableComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormTableComponent,\n    selectors: [[\"pol-form-table\"]],\n    inputs: {\n      tableData: \"tableData\"\n    },\n    outputs: {\n      dataUpdate: \"dataUpdate\",\n      rowUpdate: \"rowUpdate\"\n    },\n    decls: 7,\n    vars: 3,\n    consts: [[3, \"formGroup\"], [1, \"table\"], [4, \"ngFor\", \"ngForOf\"], [1, \"field-group\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", 3, \"disabled\", \"click\"], [3, \"formField\", \"tableConfig\", \"index\"], [4, \"ngIf\"], [\"mat-icon-button\", \"\", 3, \"disabled\", \"click\"], [1, \"done\"], [\"mat-icon-button\", \"\", 3, \"click\"], [1, \"delete\"], [1, \"edit\"]],\n    template: function FormTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"table\", 1);\n        i0.ɵɵtemplate(2, FormTableComponent_ng_container_2_Template, 6, 5, \"ng-container\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"mat-dialog-actions\");\n        i0.ɵɵelementStart(5, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function FormTableComponent_Template_button_click_5_listener() {\n          return ctx.addRow();\n        });\n        i0.ɵɵtext(6, \"Add Row\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.formTable);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.formTable.get(\"rows\")[\"controls\"]);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"disabled\", !!!ctx.formTable.untouched);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i2.NgForOf, i3.MatDialogActions, i4.MatButton, i5.FormTableFieldComponent, i2.NgIf, i6.MatIcon],\n    styles: [\".table[_ngcontent-%COMP%]{padding:20px;text-align:center}.table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{border-left:1px solid #dee2e6;border-right:1px solid #dee2e6;border-bottom:1px solid #dee2e6;border-top:1px solid #dee2e6;padding:15px}.delete[_ngcontent-%COMP%]{color:red}.done[_ngcontent-%COMP%]{color:green}mat-icon[_ngcontent-%COMP%]{cursor:pointer}@media only screen and (max-width: 760px),(min-device-width: 768px) and (max-device-width: 1024px){.table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]   .delete[_ngcontent-%COMP%]   .done[_ngcontent-%COMP%]   mat-icon[_ngcontent-%COMP%]{display:block}.table[_ngcontent-%COMP%]{position:relative;padding:20px;width:1200px;min-width:100%;max-width:100%}.table[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%]   td[_ngcontent-%COMP%]{position:relative;border-left:1px solid #dee2e6;border-right:1px solid #dee2e6;border-bottom:1px solid #dee2e6;border-top:1px solid #dee2e6;padding:15px}.delete[_ngcontent-%COMP%]{color:red}.done[_ngcontent-%COMP%]{color:green}mat-icon[_ngcontent-%COMP%]{cursor:pointer}}\"]\n  });\n  return FormTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}