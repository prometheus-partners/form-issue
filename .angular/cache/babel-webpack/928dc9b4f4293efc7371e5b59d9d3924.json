{"ast":null,"code":"import { ViewContainerRef } from '@angular/core';\nimport { InputNumberComponent } from '../../forms/components/input-number.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nconst _c0 = [\"inputField\"];\n\nfunction FormTableFieldComponent_ng_template_2_Template(rf, ctx) {}\n\nexport let FormTableFieldComponent = /*#__PURE__*/(() => {\n  class FormTableFieldComponent {\n    constructor(cfr) {\n      this.cfr = cfr;\n      this.fieldCount = 0;\n      this.defaultFieldWidth = 1280;\n      this.tableWidth = 0;\n    }\n\n    ngOnInit() {\n      for (const formFieldName of Object.keys(this.formField.value)) {\n        const formFieldValue = this.formField.value[formFieldName];\n        this.getTableConfigData(formFieldName, this.tableConfig, this.index);\n      }\n\n      console.log(this.formField);\n    }\n\n    getTableConfigData(formFieldName, tableConfigData, index) {\n      tableConfigData.forEach(tableRow => {\n        for (const fieldName of Object.keys(tableRow)) {\n          const fieldValue = tableRow[fieldName];\n\n          if (formFieldName === fieldValue) {\n            this.tableConfigData = tableConfigData.find(obj => {\n              return obj.name === formFieldName;\n            });\n            this.createField(this.tableConfigData, index);\n          }\n        }\n      });\n    }\n\n    createField(tableConfigData, index) {\n      console.log('tableConfigData => ', tableConfigData);\n      let component;\n      let fieldWidth = 0;\n\n      switch (tableConfigData.selector) {\n        // case 'text':\n        //   component = InputComponent;\n        //   fieldWidth = 300;\n        //   break;\n        case 'number':\n          component = InputNumberComponent;\n          fieldWidth = 100;\n          break;\n        // case 'select':\n        //   component = SelectComponent;\n        //   fieldWidth = 200;\n        //   break;\n        // case 'checkbox':\n        //   component = InputCheckboxComponent;\n        //   fieldWidth = 300;\n        //   break;\n        // case 'date':\n        //   component = InputDateComponent;\n        //   fieldWidth = 200;\n        //   break;\n        // case 'dateTime':\n        //   component = InputDateTimeComponent;\n        //   fieldWidth = 300;\n        //   break;\n\n        case 'default':\n          fieldWidth = 300;\n          break;\n      }\n\n      this.tableWidth += fieldWidth;\n      console.log(component);\n      const factory = this.cfr.resolveComponentFactory(component);\n      console.log(factory);\n      const inputComponent = this.viewRef.createComponent(factory);\n      inputComponent.instance.controlPath = this.formField + '.' + index + '.' + tableConfigData.name; // inputComponent.location.nativeElement.style = 'margin: 0px 8px;';\n\n      const fieldWidthSetting = 'width: ' + fieldWidth.toString() + 'px;';\n      inputComponent.location.nativeElement.style = fieldWidthSetting;\n\n      if (tableConfigData.attributeType && tableConfigData.attributeGroup) {\n        inputComponent.instance.attributeType = tableConfigData.attributeType;\n        inputComponent.instance.attributeGroup = tableConfigData.attributeGroup;\n        inputComponent.instance.labelKey = 'value';\n      }\n\n      if (tableConfigData.valueSet) {\n        inputComponent.instance.valueSet = tableConfigData.valueSet;\n\n        if (tableConfigData.labelKey) {\n          inputComponent.instance.labelKey = tableConfigData.labelKey;\n        }\n      }\n\n      if (tableConfigData.disabled) {\n        this.formField.get(tableConfigData.name).disable();\n      }\n    }\n\n    createDynamicComponent(component, viewRef) {\n      const factory = this.cfr.resolveComponentFactory(component);\n      return viewRef.createComponent(factory);\n    }\n\n  }\n\n  FormTableFieldComponent.ɵfac = function FormTableFieldComponent_Factory(t) {\n    return new (t || FormTableFieldComponent)(i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver));\n  };\n\n  FormTableFieldComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: FormTableFieldComponent,\n    selectors: [[\"pol-form-table-field\"]],\n    viewQuery: function FormTableFieldComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewRef = _t.first);\n      }\n    },\n    inputs: {\n      formField: \"formField\",\n      tableConfig: \"tableConfig\",\n      fieldWidth: \"fieldWidth\",\n      index: \"index\"\n    },\n    decls: 4,\n    vars: 1,\n    consts: [[3, \"formGroup\"], [1, \"field-container\"], [\"inputField\", \"\"]],\n    template: function FormTableFieldComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵtemplate(2, FormTableFieldComponent_ng_template_2_Template, 0, 0, \"ng-template\", null, 2, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.formField);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective],\n    styles: [\".field-container[_ngcontent-%COMP%]{display:flex}.field-container[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{margin:0 8px}@media only screen and (max-width: 760px),(min-device-width: 768px) and (max-device-width: 1024px){.field-container[_ngcontent-%COMP%]{display:block}.field-container[_ngcontent-%COMP%]{display:relative}.field-container[_ngcontent-%COMP%] > *[_ngcontent-%COMP%]{margin:0 8px}}\"]\n  });\n  return FormTableFieldComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}